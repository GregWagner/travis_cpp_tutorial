#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{tikz}
\usepackage{tkz-graph}
\usepackage{pgf}
\usetikzlibrary{arrows,automata}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Travis C++ tutorial
\end_layout

\begin_layout Author
Rich√®l Bilderbeek
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/CppLogo.jpg
	lyxscale 50
	width 50text%

\end_inset


\begin_inset Graphics
	filename docs/images/TravisCIBig.png
	lyxscale 50
	width 28text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This is a Travis C++ tutorial, version 0.2.
\end_layout

\begin_layout Subsection
License
\end_layout

\begin_layout Standard
This tutorial is licensed under Creative Commons license 4.0.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename docs/images/CC-BY-SA_icon.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creative Commons license 4.0
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All C++ code is licensed under GPL 3.0.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/gplv3.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
GPL 3.0
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Continuous integration
\end_layout

\begin_layout Standard
Collaboration can be scary: the other(s)
\begin_inset Foot
status open

\begin_layout Plain Layout
if not you
\end_layout

\end_inset

 may break the project worked on.
 The project can be of any type, not only programming, but also collaborative
 writing.
\end_layout

\begin_layout Standard
A good first step ensuring a pleasant experience is to use a version control
 system.
 A version control system keeps track of the changes in the project and
 allows for looking back in the project history when something has been
 broken.
 
\end_layout

\begin_layout Standard
The next step is to use an online version control repository, which makes
 the code easily accessible for all contributors.
 The online version control repository may also offer additional collaborative
 tools, like a place where to submit bug reports, define project milestones
 and allowing external people to submit requests, bug reports or patches.
\end_layout

\begin_layout Standard
Up until here, it is possible to submit a change that breaks the build.
 
\end_layout

\begin_layout Standard
A continuous integration tools checks what is submitted to the project and
 possibly rejects it when it does not satisfy the tests and/or requirements
 of the project.
 Instead of manually proofreading and/or testing the submission and mailing
 the contributor his/her addition is rejected is cumbersome at least.
 A continuous integration tool will do this for you.
\end_layout

\begin_layout Standard
Now, if someone changes you project, you can rest assured that his/her submissio
n does not break the project.
 Enjoy!
\end_layout

\begin_layout Subsection
Tutorial style
\end_layout

\begin_layout Standard
This tutorial is aimed at the beginner.
\end_layout

\begin_layout Paragraph
Introduction of new terms and tools
\end_layout

\begin_layout Standard
All terms and tools are introduced shortly once, by a 'What is' paragraph.
 This allows a beginner to have a general idea about what the term/tool
 is, without going in-depth.
 Also, this allows for those more knowledgeable to skim the paragraph.
\end_layout

\begin_layout Paragraph
Repetitiveness
\end_layout

\begin_layout Standard
To allow skimming, most chapters follow the same structure.
 Sometimes the exact same wording is used.
 This is counteracted by referring to earlier chapters.
\end_layout

\begin_layout Paragraph
From Travis to source
\end_layout

\begin_layout Standard
Every build, I start from Travis CI its point of view: 'What do I have to
 do?'.
 Usually Travis CI has to call at least one build bash script.
 After describing the Travis file, I will show those build files.
 Those build files usually invoke Qt Creator project files, which in turn
 combine source files to executables.
 It may feel that the best is saved for last, but I'd disagree: this is
 a Travis tutorial.
 I also think it makes up for a better narrative, to go from big to small.
\end_layout

\begin_layout Subsection
This tutorial
\end_layout

\begin_layout Standard
This tutorial is available online at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/richelbilderbeek/travis_cpp_tutorial
\end_layout

\end_inset

.
 Of course, it is checked by Travis that:
\end_layout

\begin_layout Itemize
all the setups described work
\end_layout

\begin_layout Itemize
this document can be converted to PDF.
 For this, it needs the files from all of these setups
\end_layout

\begin_layout Subsection
Acknowledgements
\end_layout

\begin_layout Standard
These people contributed to this tutorial:
\end_layout

\begin_layout Itemize
Kevin Ushey, for getting Rcpp11 and C++11 to work
\end_layout

\begin_layout Subsection
Collaboration
\end_layout

\begin_layout Standard
I welcome collaboration for this tutorial, especially in getting the scripts
 as clean as possible.
 If you want to help scraping off some lines, I will be happy to make you
 a collaborator of some GitHubs.
 
\end_layout

\begin_layout Subsection
Feedback
\end_layout

\begin_layout Standard
This tutorial is not intended to be perfect yet.
 For that, I need help and feedback from the community.
 All referenced feedback is welcome, as well as any constructive feedback.
 
\end_layout

\begin_layout Section
Setting up the basic build
\end_layout

\begin_layout Standard
The basic build is more than just a collection of files.
 It needs to be set up.
 This chapter shows how to do so.
\end_layout

\begin_layout Itemize
Create a GitHub online
\end_layout

\begin_layout Itemize
Bring the git repository to your local computer
\end_layout

\begin_layout Itemize
Create a Qt Creator project
\end_layout

\begin_layout Itemize
Create the build bash scripts
\end_layout

\begin_layout Subsection
Create a GitHub online
\end_layout

\begin_layout Paragraph
What is GitHub?
\begin_inset Index idx
status open

\begin_layout Plain Layout
GitHub
\end_layout

\end_inset


\end_layout

\begin_layout Standard
GitHub is a site that creates websites around projects.
 It is said to host these projects.
 Each project contains at least one, but usually multiple files.
 These files can be put on your own hard disc, USB stick, or other storage
 devices.
 They could also be put at a central place, which is called a repository,
 so potentially others can also access these.
 GitHub is such a file repository.
 GitHub also keeps track of the history of the project, which is also called
 version control.
 GitHub uses git as a version control software.
 In short: GitHub hosts git repositories.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-homepage"

\end_inset

 shows the GitHub homepage, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/GitHubHomepage.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The GitHub homepage, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-homepage"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Register
\begin_inset Index idx
status open

\begin_layout Plain Layout
GitHub, registration
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Before you can create a new repository, you must register.
 Registration is free for open source projects, with an unlimited
\begin_inset Foot
status open

\begin_layout Plain Layout
the maximum I have observed is a person that has 350 repositories
\end_layout

\end_inset

 amount of public repositories.
\end_layout

\begin_layout Standard
From the GitHub homepage, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com
\end_layout

\end_inset

 (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-homepage"

\end_inset

), click the top right button labeled 'Sign up'.
 This will take you to the 'Join GitHub' page (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-join"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/GitHubJoin.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The join GitHub page
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-join"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Filling this in should be as easy.
 After filling this in, you are taken to your GitHub profile page (figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-profile"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/GitHubProfile.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A GitHub profile page
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-profile"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Creating a repository
\begin_inset Index idx
status open

\begin_layout Plain Layout
GitHub, creating a repository
\end_layout

\end_inset


\end_layout

\begin_layout Standard
From your GitHub profile page (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-profile"

\end_inset

), click on the plus ('Create new ...') at the top right, then click 'New repositor
y' (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-create-repository"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/GitHubCreateRepository.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Create a GitHub repository
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-create-repository"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Do check 'Initialize this repository with a README', add a .gitignore with
 'C++' and add a licence like 'GPL 3.0'.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/GitHubCreatedRepository.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Created a GitHub repository
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-created-repository"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You have now created your own online version controlled repository (figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-created-repository"

\end_inset

)!
\end_layout

\begin_layout Subsection
Bring the git repository to your local computer
\end_layout

\begin_layout Paragraph
What is git?
\begin_inset Index idx
status open

\begin_layout Plain Layout
git
\end_layout

\end_inset


\end_layout

\begin_layout Standard
git is a version control system.
 It allows you keep a history of a file its content in time.
 It is the more convenient alternative of making copies before each modification.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=4cm, semithick
]   
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{every state}=[]
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (A)              {main.cpp};   
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (B) [right of=A] {main.cpp};   
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (C) [right of=B] {main.cpp};   
\end_layout

\begin_layout Plain Layout


\backslash
path (A) edge [bend left] node {revision 1} (B)
\end_layout

\begin_layout Plain Layout

      (B) edge [bend left] node {revision 2} (C)
\end_layout

\begin_layout Plain Layout

  ; 
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Multiple versions of main.cpp.
 git allows to always go back to each version of main
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Git-Logo-2Color.png
	lyxscale 10
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
git logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Using git
\end_layout

\begin_layout Standard
Go to the terminal and type the following line to download your repository:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git clone https://github.com/[your_name]/[your_repository]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Replace '[your_name]' and '[your_repository]' by your GitHub username and
 the repository name.
 A new folder called '[your_repository]' is created where you should work
 in.
 For example, to download this tutorial its repository to a folder called
 'travis_cpp_tutorial':
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git clone https://github.com/richelbilderbeek/travis_cpp_tutorial
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Create a Qt Creator project
\end_layout

\begin_layout Standard
Here we finally start working in C++, now that the version control has been
 discussed.
 This tutorial uses C++, mostly using the Qt Creator IDE (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-Qt-Creator"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and the qmake (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-qmake?"
plural "false"
caps "false"
noprefix "false"

\end_inset

) build system.
 Examples of using other IDEs or build systems can be found online, but
 are not covered in this tutorial.
\end_layout

\begin_layout Paragraph
What is Qt Creator?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-Qt-Creator"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Qt Creator
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Qt Creator is a C++ IDE.
 An IDE (short for 'Intrated Development Environment') is the program in
 which you program.
 Other popular C++ IDE's are CLion, Code::Blocks, NetBeans, Visual Studio
 and Visual Studio Code.
 Qt Creator works on the three major platforms (Linux, Mac and Windows)
 and it is free to use for open source development.
 It uses both the qmake (see paragraph 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-qmake?"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and CMake build systems.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Qt_Creator_logo.png
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Qt Creator logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Creating a new project
\begin_inset Index idx
status open

\begin_layout Plain Layout
Qt Creator, create new project
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here we create a C++ console application in Qt Creator.
\end_layout

\begin_layout Standard
Upon loading Qt Creator, the 'Welcome' screen is shows (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Qt-Creator-Welcome"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Here we select 'Create new project' to create a new project.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename docs/images/QtCreatorWelcome.png
	lyxscale 25
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Qt-Creator-Welcome"

\end_inset

Qt Creator Welcome screen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the 'Create new project' dialog (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Qt-Creator-New-Project"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we pick a C++ console application.
 There are plenty of other options, but here we choose to show a minimal
 example.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename docs/images/QtCreatorNewProject.png
	lyxscale 25
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Qt-Creator-New-Project"

\end_inset

Qt Creator 'New Project' dialog
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the dialogs that follow, there is a 'Define build system' dialog (figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Qt-Creator-Define-Build-System"
plural "false"
caps "false"
noprefix "false"

\end_inset

) in which we pick qmake (more about qmake in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-qmake?"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 The other build system is CMake.
 This tutorial does not show CMake examples, but there are some online examples
 in which CMake is used.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename docs/images/QtCreatorSelectBuildSystem.png
	lyxscale 25
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Qt-Creator-Define-Build-System"

\end_inset

Qt Creator 'Define Build System' dialog
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
After some more dialogs, Qt Creator creates a 'Hello world' program for
 us, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Qt-Creator-Hello-World"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 In that same picture, at the top-left, we can see a file named 'untitled.pro',
 which is our Qt Creator project file.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename docs/images/QtCreatorHelloWorld.png
	lyxscale 25
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Qt-Creator-Hello-World"

\end_inset

Qt Creator 'Hello world' code.
 At the left one can see the 'untitled.pro' Qt Creator project file
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is a Qt Creator project file?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-a-Qt-Creator-project-file?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Qt Creator project file
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A Qt Creator project file contains the information how a Qt Creator project
 must be built.
 It commonly has the .pro
\begin_inset Index idx
status open

\begin_layout Plain Layout
.pro
\end_layout

\end_inset

 file extension.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
Two big circles: 'C++ Project' and 'executable'
\end_layout

\begin_layout Plain Layout
Within first circle: two smaller circles: .cpp and .h
\end_layout

\begin_layout Plain Layout
Arrow from first to second circle with text 'compiler, linker'
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Overview of converting a C++ project to an executable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=4cm, semithick
]   
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{every state}=[]
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (A)              {a.h};   
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (B) [right of=A] {a.cpp};   
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (C) [below of=A] {b.h};   
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (D) [below of=B] {b.cpp};   
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (E) [right of=B] {a.o};   
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (F) [below of=E] {b.o};   
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (G) [right of=E] {executable};   
\end_layout

\begin_layout Plain Layout


\backslash
path 
\end_layout

\begin_layout Plain Layout

    (A) edge [dotted] node {
\backslash
#include} (B)
\end_layout

\begin_layout Plain Layout

    (A) edge [dotted] node {} (D)
\end_layout

\begin_layout Plain Layout

    (B) edge node {compiler} (E)
\end_layout

\begin_layout Plain Layout

    (C) edge[dotted] node {
\backslash
#include} (D)
\end_layout

\begin_layout Plain Layout

    (C) edge[dotted] node {} (B)
\end_layout

\begin_layout Plain Layout

    (D) edge node {compiler} (F)
\end_layout

\begin_layout Plain Layout

    (E) edge node {linker} (G)
\end_layout

\begin_layout Plain Layout

    (F) edge [bend left] node {linker} (G)
\end_layout

\begin_layout Plain Layout

  ; 
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
From files to executable.
 The compiler converts source (.cpp) files to object (.o) files.
 The linker uses these object files to create one executable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is qmake?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-qmake?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
qmake
\end_layout

\end_inset


\end_layout

\begin_layout Standard
qmake is a tool to create makefiles.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
Two upper circles: '.pro' -> 'Makefile'
\end_layout

\begin_layout Plain Layout
Two lower circles: '.cpp' and '.h', both -> to .pro, both dotted line to 'Makefile'
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
What qmake does
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is make?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-make?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
make
\end_layout

\end_inset


\end_layout

\begin_layout Standard
make is a tool that reads a makefile and creates an executable
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
'Makefile' ‚Äì[make]> 'executable'
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
What make does
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is GCC?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-GCC?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
GCC
\end_layout

\end_inset


\end_layout

\begin_layout Standard
GCC, the GNU Compiler Collection, is a collection of compilers, among other,
 the C++ compiler called g++.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/GNU_Compiler_Collection_logo.png
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
GCC logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is g++?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-g++?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
g++
\end_layout

\end_inset


\end_layout

\begin_layout Standard
g++ is the C++ compiler that is part of the GCC.
\end_layout

\begin_layout Paragraph
What is C++98?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-C++98?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
C++98
\end_layout

\end_inset


\end_layout

\begin_layout Standard
C++98 is the first C++ standard in 1998.
\end_layout

\begin_layout Paragraph
What is the STL?
\begin_inset Index idx
status open

\begin_layout Plain Layout
STL
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The STL, the Standard Template Library, is the C++ standard library.
\end_layout

\begin_layout Subsection
Create the build bash scripts
\end_layout

\begin_layout Paragraph
What is bash?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-bash?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
bash
\end_layout

\end_inset


\end_layout

\begin_layout Standard
'bash' is a shell scripting language
\end_layout

\begin_layout Section
The basic build
\begin_inset CommandInset label
LatexCommand label
name "sec:travis_qmake_gcc_cpp98"

\end_inset


\end_layout

\begin_layout Standard
This basic build consists of a 'Hello World' program, written in C++98.
 It uses the Qt Creator default settings: Qt Creator will create a Qt Creator
 project file, which in turn will use GCC.
\end_layout

\begin_layout Itemize
What is a C++98 'Hello world' program? See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:A-C++98-Hello-World-Program"

\end_inset


\end_layout

\begin_layout Itemize
The Travis build file.
 See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98-travis.yml"

\end_inset


\end_layout

\begin_layout Itemize
The build script.
 See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98-build.sh"

\end_inset


\end_layout

\begin_layout Itemize
The Qt Creator project file.
 See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98.pro"

\end_inset


\end_layout

\begin_layout Itemize
The source file.
 See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98-main.cpp"

\end_inset


\end_layout

\begin_layout Subsection
What is a C++98 'Hello world' program?
\begin_inset CommandInset label
LatexCommand label
name "subsec:A-C++98-Hello-World-Program"

\end_inset


\end_layout

\begin_layout Standard
A 'Hello World' program shows the text 'Hello world' on the screen.
 It is a minimal program.
 Its purpose is to show that all machinery is in place to create an executable
 from C++ source code.
 
\end_layout

\begin_layout Standard
A listing of a 'Hello world' program is shown at algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:travis_qmake_gcc_cpp98-main.cpp"

\end_inset

.
 Here I go through each line:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <iostream>
\end_layout

\end_inset

Read a header file called 'iostream'
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main() { /* your code */ }
\end_layout

\end_inset

The 'main' function is the starting point of a C++ program.
 Its body is between curly braces
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

std::cout << "Hello world
\backslash
n";
\end_layout

\end_inset

Show the text 'Hello world' on screen and go to the next line
\end_layout

\begin_layout Subsection
The Travis file
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98-travis.yml"

\end_inset


\end_layout

\begin_layout Standard
Travis CI is set up by a file called '.travis.yml'.
 The filename starts with a dot, which means it is a hidden file on UNIX
 systems.
 The extension 'yml'
\begin_inset Index idx
status open

\begin_layout Plain Layout
yml
\end_layout

\end_inset

 is an abbreviation of 'Yet another Markup Language'
\begin_inset Index idx
status open

\begin_layout Plain Layout
Yet Another Markup Language
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The '.travis.yml' file to build and run a 'Hello world' program looks like
 this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has the following elements:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

language: cpp
\end_layout

\end_inset

The main programming language of this project is C++
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

compiler: gcc
\end_layout

\end_inset

The C++ code will be compiled by the GCC (What is GCC? See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-GCC?"

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

script: 
\end_layout

\begin_layout Plain Layout

  - qmake
\end_layout

\begin_layout Plain Layout

  - make
\end_layout

\begin_layout Plain Layout

  - ./travis_qmake_gcc_cpp98
\end_layout

\end_inset

The script that Travis will run.
 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

qmake
\end_layout

\end_inset

'qmake'
\begin_inset Index idx
status open

\begin_layout Plain Layout
qmake
\end_layout

\end_inset

 is called to create a makefile
\begin_inset Index idx
status open

\begin_layout Plain Layout
Makefile
\end_layout

\end_inset

 (What is 'qmake'? See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-qmake?"

\end_inset

) from the only Qt Creator project file.
 In this build, the name of this project file is ommitted, as there is only
 one, but there are chapters in this tutorial where the project name is
 mentioned explicitly.
 Note that currently, qmake uses Qt4 (What is Qt4? see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:What-is-Qt4?"

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

make
\end_layout

\end_inset

'make'
\begin_inset Index idx
status open

\begin_layout Plain Layout
make
\end_layout

\end_inset

 is called to compile the makefile (What is 'make'? See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-make?"

\end_inset

).
 In this build, 'make' is called without any arguments, but there are chapters
 in this tutorial where 'make' is called with arguments
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

./travis_qmake_gcc_cpp98
\end_layout

\end_inset

Run the created executable called 'travis_qmake_gcc_cpp98'
\end_layout

\begin_layout Standard
This Travis script can fail in in multiple places:
\end_layout

\begin_layout Enumerate
If the Qt Creator project file is incorrectly formed, 'qmake' will fail,
 and as it cannot create a valid makefile
\end_layout

\begin_layout Enumerate
If the Qt Creator project file is incomplete (for example: by omitting libraries
), 'make' will fail.
 'qmake' has created a makefile, after which 'make' finds out that it cannot
 create an executable with that makefile
\end_layout

\begin_layout Enumerate
The executable can return an error code.
 A 'Hello World' program is intended to return the error code for 'everything
 went fine'.
 Other programs in this tutorial return error codes depending on test cases.
 It may also be that dynamically linked libraries cannot be found, which
 crashes the program at startup
\end_layout

\begin_layout Subsection
Qt Creator project file
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98.pro"

\end_inset


\end_layout

\begin_layout Standard
The following Qt Creator project file is used in this 'Hello world' build:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98/travis_qmake_gcc_cpp98.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This Qt Creator project file has the following elements:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SOURCES += main.cpp
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
SOURCES
\end_layout

\end_inset

The file 'main.cpp' is a source file, that has to be compiled
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -Wall -Wextra -Weffc++ -Werror
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
QMAKE_CXXFLAGS
\end_layout

\end_inset

The project is checked with all warnings ('-Wall'
\begin_inset Index idx
status open

\begin_layout Plain Layout
-Wall
\end_layout

\end_inset

), with extra warnings ('-Wextra'
\begin_inset Index idx
status open

\begin_layout Plain Layout
-Wextra
\end_layout

\end_inset

) and with the Effective C++ 
\begin_inset CommandInset citation
LatexCommand cite
key "meyers2005effective"
literal "true"

\end_inset

 advices ('-Weffc++'
\begin_inset Index idx
status open

\begin_layout Plain Layout
-Weffc++
\end_layout

\end_inset

) enforced.
 A warning is treated as an error ('-Werror'
\begin_inset Index idx
status open

\begin_layout Plain Layout
-Werror
\end_layout

\end_inset

).
 This forces you (and your collaborators) to write tidy code.
\end_layout

\begin_layout Subsection
C++ source file
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98-main.cpp"

\end_inset


\end_layout

\begin_layout Standard
The single C++ source file used in this 'Hello world' build is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98-main.cpp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the code does is display the text 'Hello world'
\begin_inset Index idx
status open

\begin_layout Plain Layout
Hello world
\end_layout

\end_inset

, which is a traditional start for many programming languages.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:A-C++98-Hello-World-Program"

\end_inset

 for a line-by-line explanation.
 The code is written in C++98 (What is C++98? See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-C++98?"

\end_inset

).
 It does not use features from the newer C++ standards, but can be compiled
 under these newer standards.
 It will not compile under plain C.
\end_layout

\begin_layout Section
Extending the build by one step
\begin_inset CommandInset label
LatexCommand label
name "sec:Extending-the-build-by-one-step"

\end_inset


\end_layout

\begin_layout Standard
The following chapter describe how to extend the build in one direction.
 These are:
\end_layout

\begin_layout Itemize
Use a debug and release build: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_debug_and_release"

\end_inset


\end_layout

\begin_layout Itemize
Use of C++11: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp11"

\end_inset


\end_layout

\begin_layout Itemize
Use of C++14: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp14"

\end_inset


\end_layout

\begin_layout Itemize
Use of Boost: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_boost"

\end_inset


\end_layout

\begin_layout Itemize
Use of Boost.Test: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_boost_test"

\end_inset


\end_layout

\begin_layout Itemize
Use of clang: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_clang_cpp98"

\end_inset


\end_layout

\begin_layout Itemize
Use of gcov and Codecov: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_gcov"

\end_inset


\end_layout

\begin_layout Itemize
Use of gprof: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_gprof"

\end_inset


\end_layout

\begin_layout Itemize
Use of Qt: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_qt"

\end_inset


\end_layout

\begin_layout Itemize
Use of Qt4: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_qt"

\end_inset


\end_layout

\begin_layout Itemize
Use of Qt5: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_qt"

\end_inset


\end_layout

\begin_layout Itemize
Use of QTest: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_qtest"

\end_inset


\end_layout

\begin_layout Itemize
Use of Rcpp: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_rcpp"

\end_inset


\end_layout

\begin_layout Itemize
Use of SFML: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_sfml"

\end_inset


\end_layout

\begin_layout Itemize
Use of Urho3D: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_urho3d"

\end_inset


\end_layout

\begin_layout Itemize
Use of Wt: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_wt"

\end_inset


\end_layout

\begin_layout Subsection
Use of debug and release build
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_debug_and_release"

\end_inset


\end_layout

\begin_layout Standard
This example shows how to use Travis to create a debug and release build.
\end_layout

\begin_layout Subsubsection
What are debug and release builds?
\begin_inset Index idx
status open

\begin_layout Plain Layout
debug build
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
release build
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A debug build means that the executable is created in such a way that helps
 in debugging it.
 For example, assert statements are only present in debug builds.
 
\end_layout

\begin_layout Standard
A release build means that the executable is created in a way that allows
 it to run quicker and have a smaller file size.
 For example, assert statements are removed from the source code in a release
 build.
\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
The Travis file has to do more things now, as it has to to create and run
 two different builds.
\end_layout

\begin_layout Standard
Here is how that looks like:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_debug_and_release/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file is rather self-explanatory: it builds a debug version,
 and runs it.
 After cleaning up, it builds a release version and runs it.
\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Standard
Both build modes have their own build script.
 They are very similar to the one described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98-build.sh"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_debug_and_release/build_debug.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build_debug.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_debug_and_release/build_release.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build_release.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only difference is the added extra parameter to 'make', which is 'debug'
 for the debug build, and 'release' for the release build.
\end_layout

\begin_layout Subsubsection
The Qt Creator project file
\end_layout

\begin_layout Standard
The Qt Creator project file has to allow for the two different builds.
 It does so as follows:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_debug_and_release/travis_qmake_gcc_cpp98_debug_and_release.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_debug_and_release.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_debug_and_release.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next to setting 'main.cpp' as the only source file, these lines are new:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CONFIG += console debug_and_release
\end_layout

\end_inset

Create a debug and release makefiles
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CONFIG(release, debug|release) {
\end_layout

\begin_layout Plain Layout

  DEFINES += NDEBUG
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

In the release makefile only, the preprocessor symbol 'NDEBUG'
\begin_inset Index idx
status open

\begin_layout Plain Layout
NDEBUG
\end_layout

\end_inset

 is #defined
\begin_inset Index idx
status open

\begin_layout Plain Layout
#define
\end_layout

\end_inset

.
 This, among others, will remove all assert
\begin_inset Index idx
status open

\begin_layout Plain Layout
assert, remove
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
remove assert
\end_layout

\end_inset

 statements
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
This build uses a 'Hello world'-like program that shows and proves the mode
 in which it is built:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_debug_and_release/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It will show in text the build type.
 Next to this, an assert is called.
 In release mode, the known-to-be-false assert statement is removed.
 In debug mode, the known-to-be-true assert statement is left in.
\end_layout

\begin_layout Subsection
Use of C++11
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by using C++11, instead of C++98.
\end_layout

\begin_layout Subsubsection
What is C++11?
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++11
\end_layout

\end_inset


\end_layout

\begin_layout Standard
C++11 is the C++ standard formalized in 2011.
 Its working title was C++0x
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++0x
\end_layout

\end_inset

, as then it was assumed that the standard would be finished in 200x.
 C++11 is fully backwards compatible with C++98.
 One of the major new features of C++11 is the introduction of move semantics,
 which results in faster run-time code, by possibly reducing needless copies
 of objects.
 
\end_layout

\begin_layout Standard
In my examples, I typically use the C++11 'noexcept' keyword (What is noexcept?
 See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:What-is-noexcept?"

\end_inset

).
 
\end_layout

\begin_layout Subsubsection
What is noexcept?
\begin_inset CommandInset label
LatexCommand label
name "subsec:What-is-noexcept?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
noexcept
\end_layout

\end_inset


\end_layout

\begin_layout Standard
'noexcept' is a C++11 keyword.
 It is a modifier that specifies that a (member) function will not throw
 an exception.
 Would that function throw an exception anyhow, the program is terminated.
 
\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
The default Travis CI setup is not sufficient to use C++11 (yet).
 Travis CI by default uses a LTS
\begin_inset Index idx
status open

\begin_layout Plain Layout
LTS
\end_layout

\end_inset

 ('Long Term Stable')
\begin_inset Index idx
status open

\begin_layout Plain Layout
Long Term Stable
\end_layout

\end_inset

 repository, as these is the most stable and reliable.
 The version of g++ in that repository is version 4.6.3, whuch does not support
 C++11.
 To use C++11, we will first add a fresher (less stable) repository.
 Then we can install g++-5,that does support C++11.
 
\end_layout

\begin_layout Standard
Here is how that looks like:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has some new features:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo: require
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
sudo
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
sudo: require
\end_layout

\end_inset

For this build, we need super user rights.
 When you need super user rights, the build will be slower.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install:
\end_layout

\end_inset

The following events will take place before installation
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test
\end_layout

\end_inset

A new apt repository is added.
 The '‚Äìyes' explicitly states that we are sure we want to do this.
 Without the '‚Äìyes' flag, Travis will be prompted if it is sure it wants
 to add this repository.
 This would break the build.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo apt-get update -qq
\end_layout

\end_inset

After adding the new apt repository, then the current repositories need
 to be updated updated.
 The '-qq' means that this happens quietly; with the least amount of output.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

install: sudo apt-get install -qq g++-5
\end_layout

\end_inset

Install g++-5, which is a newer version of GCC than is installed by default
\end_layout

\begin_layout Standard
In the script, the code is built and then run.
\end_layout

\begin_layout Subsubsection
The Qt Creator project file
\end_layout

\begin_layout Standard
The Qt Creator project file by default calls 'g++' with its default C++
 standard.
 In this build, we will have to let it call g++-5 with the C++11 standard:
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11/travis_qmake_gcc_cpp11.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

, except for:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXX = g++-5
\end_layout

\end_inset

Set the C++ compiler to use g++ version 5, which is a newer version than
 currently used by default
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_LINK = g++-5
\end_layout

\end_inset

Set the C++ linker to use g++ version 5, which is a newer version than currently
 used by default
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CC = g++5
\end_layout

\end_inset

Set the C compiler to use g++ version 5, which is a newer version than currently
 used by default
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -std=c++11
\end_layout

\end_inset

Compile under C++11
\end_layout

\begin_layout Standard
Except for this, all is just the same.
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
This build uses a 'Hello world'-like program that uses C++11:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It will show the text 'Hello world' on screen.
\end_layout

\begin_layout Standard
The keyword 'noexcept' (What is noexcept? See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:What-is-noexcept?"

\end_inset

) does not exist in C++98 and it will fail to compile.
 This code will compile under newer versions of C++.
\end_layout

\begin_layout Subsection
Use of C++14
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp14"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by using C++14.
 
\end_layout

\begin_layout Paragraph
What is C++14?
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++14
\end_layout

\end_inset


\end_layout

\begin_layout Standard
C++14 is a C++ standard that was formalized in 2014.
 It is fully backwards compatible with C++11 and C++98.
 It does not have any major new features, and mostly extends C++11 features.
\end_layout

\begin_layout Standard
In my examples, I usually add digit seperators: instead of '1000', in C++14
 one can write '1'000', using a single quote as a seperator.
 This will not compile in C++11.
\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file is the same as the C++11 build in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp11"

\end_inset

.
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14/travis_qmake_gcc_cpp14.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp14.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp14"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the C++11 build in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp11"

\end_inset

, except for that it uses one different QMAKE_CXXFLAGS item:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -std=c++14
\end_layout

\end_inset

Compile under C++14
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a simple C++14 program that will not compile under C++11.
\end_layout

\begin_layout Subsection
Adding Boost
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_boost"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Boost libraries.
 
\end_layout

\begin_layout Subsubsection
What is Boost?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Boost
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Boost is a collection of C++ libraries.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Boost_logo.png
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Boost logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_boost/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has one new feature:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

addons:
\end_layout

\begin_layout Plain Layout

  apt:
\end_layout

\begin_layout Plain Layout

    packages: libboost-all-dev
\end_layout

\end_inset

This makes Travis aware that you want to use the aptitude package 'libboost-all-
dev'.
 Note that this code cannot be put on one line: it has to be indented similar
 to this
\end_layout

\begin_layout Standard
Using packages like this avoids using sudo, which speeds up the build.
 Not all packages can be used as such, however, but most are.
\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Standard
The bash build script to build and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_boost/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script is identical to the basic build script as in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98-build.sh"

\end_inset

.
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_boost/travis_qmake_gcc_cpp98_boost.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_boost.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_boost.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98.pro"

\end_inset

.
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_boost/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is display the version of Boost on the screens.
 It will only compile when the Boost libraries are present.
 
\end_layout

\begin_layout Standard
Currently, on Travis CI, the default Boost version is 1.46.1.
\end_layout

\begin_layout Subsection
Adding Boost.Test
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_boost_test"

\end_inset


\end_layout

\begin_layout Standard
Adding only a testing framework does not work: it will not compile in C++98.
 Instead, this is covered in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp11_boost_test"

\end_inset

.
\end_layout

\begin_layout Subsection
Use of clang
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_clang_cpp98"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is compiled by the clang compiler.
 
\end_layout

\begin_layout Subsubsection
What is Clang?
\begin_inset Index idx
status open

\begin_layout Plain Layout
clang
\end_layout

\end_inset


\end_layout

\begin_layout Standard
clang is a C++ compiler
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename docs/images/LLVM_Logo.png
	lyxscale 25
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
clang logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_clang_cpp98/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file uses the package clang (without needing sudo), compiles
 the program and then runs it.
\end_layout

\begin_layout Subsubsection
The build bash scrip
\end_layout

\begin_layout Standard
The bash build script to build this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_clang_cpp98/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script is identical to the basic bash script as described in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98-build.sh"

\end_inset

.
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_clang_cpp98/travis_qmake_clang_cpp98.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_clang_cpp98.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_clang_cpp98.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file..
 except for:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXX = clang++
\end_layout

\end_inset

Set the C++ compiler to use clang++
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_LINK = clang++
\end_layout

\end_inset

Set the C++ linker to use clang++
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CC = clang
\end_layout

\end_inset

Set the C compiler to use clang
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_clang_cpp98/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is just a 'Hello world' program, as discussed in detail in chapter
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Adding gcov and Codecov
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_gcov"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by calling gcov and using codecov to show the code coverage.
 
\end_layout

\begin_layout Subsubsection
What is gcov?
\begin_inset Index idx
status open

\begin_layout Plain Layout
gcov
\end_layout

\end_inset


\end_layout

\begin_layout Standard
gcov is a tool that works with GCC to analyse code coverage
\end_layout

\begin_layout Subsubsection
What is Codecov?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Codecov
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Codecov works nice with GitHub and give nicer reports
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Codecov.png
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Codecov logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here is an example of a code coverage report, which is generated by this
 example:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../travis_qmake_gcc_cpp98_gcov/travis_qmake_gcc_cpp98_gcov_codecov.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Codecov report of this build
\begin_inset CommandInset label
LatexCommand label
name "fig:travis_qmake_gcc_cpp98_gcov_codecov"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_gcov/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has some new features: 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo: require
\end_layout

\end_inset

Travis will give super user rights to the script.
 This will slow the build time, but it is inevitable for the next step
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install: sudo pip install codecov
\end_layout

\end_inset

Travis will use pip to install codecov using super user rights.
 It is temporary workaround to use sudo, as sudo should not be needed.
 This is seen as a bug, is known and solved.
 It just has to seep through to the Travis CI GNU/Linux distro.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

after_success: codecov
\end_layout

\end_inset

After the script has run successfully, codecov is called
\end_layout

\begin_layout Standard
The code coverage performed in this build mismatches with the goals of code
 coverage.
 One of these goals is to test for unused ('dead') code.
 Code coverage fits better within a debug build, where all functions are
 tested with valid and invalid input.
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp11_debug_gcov"

\end_inset

 shows a build in which code coverage is tested in debug mode only.
\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Standard
The bash build to measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_gcov/get_code_cov"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
get_code_cov
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This script uses gcov on all implementation files.
\end_layout

\begin_layout Standard
Going into a bit more detail on the new lines:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for filename in `find .
 | egrep '
\backslash
.cpp'`; 
\end_layout

\begin_layout Plain Layout

do 
\end_layout

\begin_layout Plain Layout

  gcov -n -o .
 $filename > /dev/null; 
\end_layout

\begin_layout Plain Layout

done
\end_layout

\end_inset

Find all filenames (in this folder and its subfolder) that end with '.cpp'.
 For each of these filenames, let 'gcov' work on it.
 The '-n' flag denotes 'no output please'.
 Because there is still some output, this output is sent to the void of
 '/dev/null'.
 The '-o .' means that the object files are in the same folder as this script
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This normal is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_gcov/travis_qmake_gcc_cpp98_gcov.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_gcov.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_gcov.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has two new lines:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -fprofile-arcs -ftest-coverage
\end_layout

\end_inset

Let the C++ compiler add coverage information
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LIBS += -lgcov
\end_layout

\end_inset

Link against the gcov library
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
The C++ source file used by the normal build is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_gcov/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It defines a function called 'do_magic'.
 It is called for the value two, but not for the value 42.
 Due to this, we expect to see an incomplete code coverage.
 And this is indeed detected, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:travis_qmake_gcc_cpp98_gcov_codecov"

\end_inset

.
\end_layout

\begin_layout Subsection
Adding OCLint
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_oclint"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by adding OCLint support.
 Because we intendedly use smelly code, this build is supposed to fail due
 to (only) this.
\end_layout

\begin_layout Paragraph
What is OCLint?
\begin_inset Index idx
status open

\begin_layout Plain Layout
OCLint
\end_layout

\end_inset


\end_layout

\begin_layout Standard
OCLint is a static code analysis tool.
\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_oclint/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has one new feature:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo add-apt-repository ppa:ubuntu-toolchain-r/test --yes
\end_layout

\end_inset

Add a newer apt repository than installed on Travis
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo apt-get update -qq 
\end_layout

\end_inset

Update the packages
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo apt-get install -qq libstdc++6-4.7-dev
\end_layout

\end_inset

This makes Travis install the package 'libstdc++6-4.7-dev', that is needed
 by OCLint
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

./install_oclint.sh
\end_layout

\end_inset

This makes Travis install OCLint
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

./do_oclint.sh
\end_layout

\end_inset

Let OCLint check the code
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cat log_correct.txt
\end_layout

\end_inset

Let Travis show the log of a file that passes OCLint
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cat log_correct.txt
\end_layout

\end_inset

Let Travis show the log of a file that does not pass OCLint
\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Standard
The bash build script to build this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_oclint/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The script to let OCLint check the code:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_oclint/do_oclint.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
do_oclint.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here I call OCLint with these parameters:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

-o oclint.log
\end_layout

\end_inset

Write the output to the file 'oclint.log'
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

main.cpp
\end_layout

\end_inset

All the files to be analysed
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

--
\end_layout

\end_inset

After this are the compiler settings
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

-c
\end_layout

\end_inset

?no idea, please email me if you do
\end_layout

\begin_layout Standard
Additionally, I analyse the log files using 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

success=`egrep "FilesWithViolations=0 P1=0 P2=0 P3=0" log_correct.txt | wc
 -l`
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In more detail, this means:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

success=`[...]`
\end_layout

\end_inset

The variable 'success' get assigned the outcome of the part between backticks
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

egrep "[regex]" oclint.log
\end_layout

\end_inset

Search through the file 'oclint.log' for the regular expression '[regex]'
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

| wc -l
\end_layout

\end_inset

The result of the egrep is piped to a word count ('wc') by line '-l'.
 If egrep found the regex, the line count will be 1, yet 0 otherwise
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_oclint/travis_qmake_gcc_cpp98_oclint.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_oclint.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_oclint.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
The C++ source file used is just a 'Hello World' program:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_oclint/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Adding profiling
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_gprof"

\end_inset


\end_layout

\begin_layout Subsection
Adding the Qt library
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_qt"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Qt library.
\end_layout

\begin_layout Paragraph
What is Qt?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-Qt?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Qt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Qt (pronounce 'cute') is a library to create C++ GUI's.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename docs/images/Qt_logo_2015.png
	lyxscale 10
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Qt logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
At this moment, there are two versions of Qt: Qt4 and Qt5.
 The GNU/Linux version Travis CI uses has Qt4.
 When this GNU/Linux distro changes, Qt5 will be the new (next) default.
\end_layout

\begin_layout Subsection
Adding the Qt4 library
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_qt4"

\end_inset


\end_layout

\begin_layout Subsubsection
What is Qt4?
\begin_inset CommandInset label
LatexCommand label
name "subsec:What-is-Qt4?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Qt4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Qt4 is version 4 of the Qt library (What is Qt? see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-Qt?"

\end_inset

).
\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt4/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file starts xvfb before the script.
 In the script, it builds the code first, before running the resulting executabl
e.
 Instead of calling 'qmake', however, it explicitly calls 'qmake-qt4'
\begin_inset Index idx
status open

\begin_layout Plain Layout
qmake-qt4
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Subsubsection
What is xvfb?
\begin_inset CommandInset label
LatexCommand label
name "subsec:What-is-xvfb?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
xvfb
\end_layout

\end_inset


\end_layout

\begin_layout Standard
xvfb is the vitual X server.
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This project is compiled from the following Qt Creator project file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt4/travis_qmake_gcc_cpp98_qt4.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_qt4.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt4.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QT += core gui
\end_layout

\end_inset

To be able to use a GUI, one needs to add 'gui' (and keep 'core') defined
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -Wall -Wextra -Werror
\end_layout

\end_inset

When working with a Qt resource file, the '-Weffc++' flag will trigger a
 warning
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SOURCES += main.cpp
\end_layout

\begin_layout Plain Layout

HEADERS += my_dialog.h
\end_layout

\begin_layout Plain Layout

SOURCES += my_dialog.cpp
\end_layout

\begin_layout Plain Layout

FORMS   += my_dialog.ui
\end_layout

\end_inset

The files that, respectively, contain the main function definition, the
 declaration of 'my_dialog', the implementation of 'my_dialog' and the form
 of 'my_dialog'
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

RESOURCES += travis_qmake_gcc_cpp98_qt4.qrc
\end_layout

\end_inset

Use a resource file.
 This resource file contains the picture that is on the form.
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
This project uses multiple source files.
\end_layout

\begin_layout Standard
The main function is defined as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt4/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a standard implementation of the main function for a graphical Qt
 application.
\end_layout

\begin_layout Standard
qwfq
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <QApplication>
\end_layout

\begin_layout Plain Layout

#include "my_dialog.h"
\end_layout

\end_inset

Read the headers of, respectively, the Qt QApplication class and our custom
 my_dialog class
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\end_inset

This is one of the two official versions of main.
 This version takes into account the arguments supplied at startup of the
 application.
 For example, would this application be called with 'travis_qmake_gcc_cpp98_qt4
 hello', the value of argc ('argument count') would be two and the array
 argv would be (thus) of size two with strings 'travis_qmake_gcc_cpp98_qt4'
 and 'hello'
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QApplication a(argc, argv);
\end_layout

\end_inset

Start the QApplication class
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

my_dialog d;
\end_layout

\begin_layout Plain Layout

d.show();
\end_layout

\end_inset

Create an instance of my_dialog and show it
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

return a.exec();
\end_layout

\end_inset

Start QApplication (which handles events for my_dialog) and return an error
 code depending on how the application is terminated.
\end_layout

\begin_layout Standard
The declaration of my_dialog looks like this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt4/my_dialog.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_dialog.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This header file is completely generated by Qt Creator.
 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#ifndef MY_DIALOG_H
\end_layout

\begin_layout Plain Layout

#define MY_DIALOG_H
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif // MY_DIALOG_H
\end_layout

\end_inset

This is an #include guard
\begin_inset Index idx
status open

\begin_layout Plain Layout
#include guard
\end_layout

\end_inset

.
 An #include guard ensures that this file is read only once per compilation
 unit.
 Every header file should have these [REF]
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

, although '#pragma once'
\begin_inset Index idx
status open

\begin_layout Plain Layout
#pragma once
\end_layout

\end_inset

 is also a fine solution.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <QDialog>
\end_layout

\end_inset

Read the Qt QDialog header file
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

namespace Ui {
\end_layout

\begin_layout Plain Layout

  class my_dialog;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

A forward-declaration
\begin_inset Index idx
status open

\begin_layout Plain Layout
forward-declaration
\end_layout

\end_inset

 of a class called 'my_dialog' within the 'Ui' namespace.
 Forward-declarations intend to speed up compilation.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class my_dialog : public QDialog
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset

Create a class called 'my_dialog' which is a derived class of the Qt 'QDialog'
 class
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Q_OBJECT
\end_layout

\end_inset

Macro to signify that this class uses the Qt signal and slot mechanism
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

  explicit my_dialog(QWidget *parent = 0);
\end_layout

\begin_layout Plain Layout

  ~my_dialog();
\end_layout

\end_inset

Public constructor and destructor
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private:
\end_layout

\begin_layout Plain Layout

  Ui::my_dialog *ui;
\end_layout

\end_inset

The private user interface (which has only been forward-declared)
\end_layout

\begin_layout Standard
The implementation of my_dialog looks like this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt4/my_dialog.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_dialog.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of this code is generated by Qt, except for the addition of a timer
 that closes the dialog after one second:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include "my_dialog.h"
\end_layout

\begin_layout Plain Layout

#include "ui_my_dialog.h"
\end_layout

\begin_layout Plain Layout

#include <QTimer>
\end_layout

\end_inset

Read, respectively, the declaration of my_dialog, the declaration of the
 user interface of my_dialog, and the declaration of the Qt QTimer class
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

my_dialog::my_dialog(QWidget *parent) :
\end_layout

\begin_layout Plain Layout

  QDialog(parent),
\end_layout

\begin_layout Plain Layout

  ui(new Ui::my_dialog)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

This is a standard constructor.
 The base class of my_dialog, QDialog, is called with the optional 'parent'
 argument.
 The user interface is instanciated.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ui->setupUi(this);
\end_layout

\end_inset

Set up the user interface of my_dialog
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QTimer * const timer(new QTimer(this));
\end_layout

\begin_layout Plain Layout

connect(timer,SIGNAL(timeout()),this,SLOT(close()));
\end_layout

\begin_layout Plain Layout

timer->setInterval(1000);
\end_layout

\begin_layout Plain Layout

timer->start();
\end_layout

\end_inset

Create a timer, which will be deleted by this class.
 Connect its 'timeout' signal to the 'close' slot of this dialog.
 Set the interval of the timer to a thousand milliseconds and start it.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

my_dialog::~my_dialog()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  delete ui;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

A standard destructor, that deletes the user interface
\end_layout

\begin_layout Subsection
Adding the Qt5 library
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_qt5"

\end_inset


\end_layout

\begin_layout Subsubsection
What is Qt5?
\begin_inset CommandInset label
LatexCommand label
name "subsec:What-is-Qt5?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Qt5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Qt5 is version 5 of the Qt library (What is Qt? see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-Qt?"

\end_inset

).
\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Qt5 is not the default Qt version in the current Travis CI GNU/Linux distro.
\end_layout

\begin_layout Standard
Thanks to 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://stackoverflow.com/questions/25737062/travis-ci-for-a-qt5-project#25743300
 
\end_layout

\end_inset

 for showing how install Qt5 on Travis CI:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt5/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file is an extension of when adding the Qt4 library (chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_qt4"

\end_inset

).
 The new lines are:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo add-apt-repository --yes ppa:ubuntu-sdk-team/ppa
\end_layout

\end_inset

Add an apt repository that has Qt5
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo apt-get update -qq
\end_layout

\end_inset

Update the current apt repositories, to be able to find Qt5
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

- sudo apt-get install qtbase5-dev qtdeclarative5-dev
\end_layout

\begin_layout Plain Layout

- sudo apt-get install libqt5webkit5-dev libsqlite3-dev
\end_layout

\begin_layout Plain Layout

- sudo apt-get install qt5-default qttools5-dev-tools
\end_layout

\end_inset

Install all Qt5 apt packagess.
 I put these on three lines just for readability.
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This project compiled with qmake from the following Qt Creator project file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt5/travis_qmake_gcc_cpp98_qt5.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_qt5.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt5.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file is similar to the one needed for the Qt4 library
 (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_qt4"

\end_inset

), except for:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QT += core gui widgets
\end_layout

\end_inset

Add 'core', 'gui' and (new) 'widgets' to the Qt configuration.
 One of the differences between Qt4 and Qt5 is that part of what was 'gui'
 has been moved to 'widgets'.
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
This project uses multiple source files.
\end_layout

\begin_layout Standard
The main function is defined as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt5/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This main function definition is close to identical to that of when using
 Qt4 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_qt4"

\end_inset

).
\end_layout

\begin_layout Standard
The declaration of my_qt5_dialog is as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt5/my_qt5_dialog.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_qt5_dialog.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This header file is also close to identical to that of when using Qt4 (see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_qt4"

\end_inset

).
\end_layout

\begin_layout Standard
The implementation of my_qt5_dialog:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt5/my_qt5_dialog.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_qt5_dialog.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This implementation file is also close to identical to that of when using
 Qt4 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_qt4"

\end_inset

), except for this line:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

connect(
\end_layout

\begin_layout Plain Layout

  timer, &QTimer::timeout, 
\end_layout

\begin_layout Plain Layout

  this, &my_qt5_dialog::close
\end_layout

\begin_layout Plain Layout

); 
\end_layout

\end_inset

This is the Qt5 syntax of connecting QTimer its 'timeout' slot to my_qt5_dialog
 its 'close' slot.
 This syntax will not compile with Qt4.
 The new syntax has the benefit that during compilation it can be checked
 that the signals and slots exist (Qt4 emits a warning at runtime).
 
\end_layout

\begin_layout Subsection
Adding QTest
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_qtest"

\end_inset


\end_layout

\begin_layout Standard
One cannot use QTest without Qt.
 Because this thus takes two steps, this is covered in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Qt-and-QTest"

\end_inset

.
\end_layout

\begin_layout Subsection
Adding Rcpp
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_rcpp"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Rcpp library/package.
 
\end_layout

\begin_layout Paragraph
What is R?
\begin_inset Index idx
status open

\begin_layout Plain Layout
R
\end_layout

\end_inset


\end_layout

\begin_layout Standard
R is a programming language.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Rlogo.png
	lyxscale 10
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
R logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is Rcpp?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rcpp
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Rcpp is a package that allows to call C++ code from R 
\end_layout

\begin_layout Subsubsection
Build overview
\end_layout

\begin_layout Standard
The build will be complex: I will show the C++ build and the R build seperately
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1, 2) { $C++$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (-2, 0) { $main.cpp$ 
\backslash

\backslash
 $domagic.pro$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (2, 0) { $do
\backslash
_magic
\backslash
_cpp.h$ 
\backslash

\backslash
 $do
\backslash
_magic
\backslash
_cpp.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5, 2) { $R$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $do
\backslash
_magic
\backslash
_r.R$ 
\backslash

\backslash
 $test-do
\backslash
_magic.R$ };
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11_rcpp/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file is longer than usual, as it both compiles and runs the
 C++ and R code.
\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Standard
The C++ build script:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_rcpp/build_cpp.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build_cpp.sh
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_rcpp_build_cpp.sh"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
This R build script installs the required R packages:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_rcpp/install_r_packages.R"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build_cpp.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11_rcpp/domagic.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
domagic.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:domagic.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The name of the Qt Creator project file is 'domagic' as it follows the same
 naming as the R project.
 It add the R and Rcpp and src folders to its include path and links to
 R.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Replace '/home/p230198' by '~' or HOME or something
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The C++ and R source files
\end_layout

\begin_layout Standard
Both C++ and R use this function.
 It is called 'do_magic_cpp'.
 It is declared in the header file 'do_magic_cpp.h', as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_rcpp/src/do_magic_cpp.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
src/do_magic_cpp.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The header file consists solely of #include guards and the declaration of
 the function 'do_magic_cpp'.
\end_layout

\begin_layout Standard
The function 'do_magic_cpp' is implemented in the implementation file 'do_magic_
cpp.cpp', as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_rcpp/src/do_magic_cpp.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
src/do_magic_cpp.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This implementation file has gotten rather elaborate, thanks to Rcpp and
 documentation.
 This is because it has to be callable from both C++ and R and satisfy the
 requirement from both languages.
\end_layout

\begin_layout Subsubsection
The C++-only source files
\end_layout

\begin_layout Standard
The C++ program has a normal main function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_rcpp/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All it does is a simple test of the 'do_magic_cpp' function.
\end_layout

\begin_layout Subsubsection
The R-only source files
\end_layout

\begin_layout Standard
The R function 'do_magic_r' calls the C++ function 'do_magic_cpp':
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11_rcpp/R/do_magic_r.R"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
R/do_magic_r.R
\begin_inset CommandInset label
LatexCommand label
name "alg:do_magic_r.R"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next to this, it is just Roxygen2 documentation
\end_layout

\begin_layout Standard
R allows for easy testing using the 'testthat' package.
 A test file looks as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11_rcpp/tests/testthat/test-do_magic.R"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
tests/testthat/test-do_magic_r.R
\begin_inset CommandInset label
LatexCommand label
name "alg:test-do_magic_r.R"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The tests call both the R and C++ functions with certain inputs and checks
 if the output matches the expectations.
 
\end_layout

\begin_layout Subsection
Adding the SFML library
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_sfml"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the SFML library.
 The result will be a simple graphical display as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:travis_qmake_gcc_cpp98_sfml"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../travis_qmake_gcc_cpp98_sfml/travis_qmake_gcc_cpp98_sfml.png
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_sfml screenshot
\begin_inset CommandInset label
LatexCommand label
name "fig:travis_qmake_gcc_cpp98_sfml"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is SFML?
\begin_inset Index idx
status open

\begin_layout Plain Layout
SFML
\end_layout

\end_inset


\end_layout

\begin_layout Standard
SFML ('Simple and Fast Multimedia Library') is a library intended for 2D
 game development.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename docs/images/SFML_Logo.png
	lyxscale 25
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
SFML logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_sfml/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has one new feature:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo apt-add-repository ppa:sonkun/sfml-development --yes
\end_layout

\end_inset

Add an apt repository for a fresh version of SFML
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

install: sudo apt-get install libsfml-dev
\end_layout

\end_inset

This makes Travis install the needed package
\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Standard
The bash build script to build this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_sfml/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_sfml/travis_qmake_gcc_cpp98_sfml.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_sfml.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_sfml.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

, except for:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LIBS += -lsfml-graphics -lsfml-window -lsfml-system -lsfml-audio
\end_layout

\end_inset

Link to the SFML libraries
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_sfml/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It draws a rotating rectangle by incrementing the variable 'angle'.
 After this variable reaches a certain value, the application is terminated.
\end_layout

\begin_layout Standard
The reason the application is terminated, is because it must be run on Travis
 CI and thus terminate without user input.
\end_layout

\begin_layout Subsection
Adding SLOCcount
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11_sloccount"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also measuring the SLOCcount.
\end_layout

\begin_layout Paragraph
What is SLOCcount?
\begin_inset Index idx
status open

\begin_layout Plain Layout
SLOCcount
\end_layout

\end_inset


\end_layout

\begin_layout Standard
SLOCcount estimates the costs to develop code.
\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11_sloccount/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has one new feature:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo add-apt install sloccount
\end_layout

\end_inset

Install the package 'sloccount'
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cd ..; sloccount --overhead 1 --personcost 22611 travis_qmake_gcc_cpp98_sloccount
\end_layout

\end_inset

Go up one folder and measure the SLOCcount of this project, knowing it is
 a solo-project in which the developer makes the Dutch minimum wages
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11_sloccount/travis_qmake_gcc_cpp11_sloccount.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_sloccount.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_sloccount.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
The single C++ source file used exactly the same as described in chater
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98-main.cpp"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_sloccount/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Adding the Urho3D library
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_urho3d"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Urho3D library.
\end_layout

\begin_layout Paragraph
What is Urho3D?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Urho3D
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Urho3D is a library to create C++ 3D games.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename docs/images/Urho3D_logo.png
	lyxscale 50
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Urho3D logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Build overview
\end_layout

\begin_layout Standard
The files will work together to create the following 3D world:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/richel/GitHubs/travis_qmake_gcc_cpp11_urho3d/pics/travis_qmake_gcc_cpp11_urho3d.png
	lyxscale 50
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Screenshot of travis_qmake_gcc_cpp11_urho3d
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11_urho3d/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has to do many things.
\end_layout

\begin_layout Standard
Note that we do not run the application.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Let the application terminate after 10 secs
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
The files are compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp98_urho3d/travis_qmake_gcc_cpp98_urho3d.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_urho3d.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_urho3d.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file lists all source files, uses g++5
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: try g++
\end_layout

\end_inset

, suppresses a warning 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: can I remove that?
\end_layout

\end_inset

, includes and links to multiple libraries.
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
The C++ source files are too big to show here.
 Their names are:
\end_layout

\begin_layout Itemize
cameramaster.h 
\end_layout

\begin_layout Itemize
cameramaster.cpp
\end_layout

\begin_layout Itemize
inputmaster.h
\end_layout

\begin_layout Itemize
inputmaster.cpp
\end_layout

\begin_layout Itemize
mastercontrol.h
\end_layout

\begin_layout Itemize
mastercontrol.cpp
\end_layout

\begin_layout Subsection
Adding the Wt library
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp98_wt"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Wt library.
\end_layout

\begin_layout Paragraph
What is Wt?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Wt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wt (pronounce 'witty') is a library to create C++ websites.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/WtLogo.png
	lyxscale 50
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Wt logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_wt/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has uses the package 'libboost-all-dev' and installs
 'witty-dev'.
 It does not run the application
\begin_inset Note Note
status open

\begin_layout Plain Layout
Let it run for 10 secs
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Standard
The bash build script to build this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_wt/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_wt/travis_qmake_gcc_cpp98_wt.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_wt.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_wt.pro-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

, except for that it links to multiple libraries and suppresses a warning.
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_wt/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It starts a web server
\begin_inset Note Note
status open

\begin_layout Plain Layout
Shorten this code
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Extending the build by two steps
\end_layout

\begin_layout Standard
You will probably want to combine the single ingredients in the previous
 chapters.
 This will also result in more complex project setups.
 In this chapter, such setups will be described:
\end_layout

\begin_layout Itemize
Use of gcov in debug mode only: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Use-of-gcov-in-debug-mode-only"

\end_inset

 
\end_layout

\begin_layout Itemize
Use of Qt and QTest: see chapter 
\end_layout

\begin_layout Itemize
Use of C++11 and Boost: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp11_boost"

\end_inset


\end_layout

\begin_layout Itemize
Use of C++11 and Boost.Test: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp11_boost_test"

\end_inset


\end_layout

\begin_layout Itemize
Use of C++14 and Boost: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp14_boost"

\end_inset


\end_layout

\begin_layout Subsection
Use of gcov in debug mode only
\begin_inset CommandInset label
LatexCommand label
name "subsec:Use-of-gcov-in-debug-mode-only"

\end_inset


\end_layout

\begin_layout Standard
In this example, the C++98 build with gcov (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_gcov"

\end_inset

) is extended by using gcov in debug mode only.
 
\end_layout

\begin_layout Subsubsection
Build overview
\end_layout

\begin_layout Standard
This will be a more complex build, consisting of two projects:
\end_layout

\begin_layout Itemize
A release version that just runs the code, assuming it to be correct
\end_layout

\begin_layout Itemize
A debug version that tests the code and measures code coverage
\end_layout

\begin_layout Standard
The filenames are shown in this figure:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_gcov.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (-2, 0) { $main.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (2, 0) { $do
\backslash
_magic.h$ 
\backslash

\backslash
 $do
\backslash
_magic.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_gcov
\backslash
_gcov.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $main
\backslash
_gcov.cpp$ };
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_debug_gcov/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has some new features: 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo: true
\end_layout

\end_inset

Travis will give super user rights to the script.
 This will slow the build time, but it is inevitable for the next step
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install: sudo pip install codecov
\end_layout

\end_inset

Travis will use pip to install codecov using super user rights
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

after_success: codecov
\end_layout

\end_inset

After the script has run successfully, codecov is called
\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_debug_gcov/build_debug"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build_debug
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The new step is ...
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_debug_gcov/build_release"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build_release
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is ...
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
Release:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_debug_gcov/travis_qmake_gcc_cpp98_debug_gcov.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_debug_gcov.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_debug_gcov.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Debug with gcov:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_debug_gcov/travis_qmake_gcc_cpp98_debug_gcov_gcov.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_gcov.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_gcov_gcov.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has two new lines:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -fprofile-arcs -ftest-coverage
\end_layout

\end_inset

Let the C++ compiler add coverage information
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LIBS += -lgcov
\end_layout

\end_inset

Link against the gcov library
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Paragraph
Common files
\end_layout

\begin_layout Standard
Both builds use the following code:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_debug_gcov/do_magic.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
do_magic.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
And its implementation:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_debug_gcov/do_magic.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
do_magic.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Release main function
\end_layout

\begin_layout Standard
The C++ source file used by the normal build is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_debug_gcov/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Debug and gcov main function
\end_layout

\begin_layout Standard
The C++ source file used by the normal build is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_debug_gcov/main_gcov.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main_gcov.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Qt and QTest
\begin_inset CommandInset label
LatexCommand label
name "subsec:Qt-and-QTest"

\end_inset


\end_layout

\begin_layout Standard
This build is about a Qt dialog that displays an image (using a Qt resource).
 When the key 'x' is pressed, it should close.
\end_layout

\begin_layout Standard
The release build is just that application.
 
\end_layout

\begin_layout Standard
The debug build tests if the application indeed closes upon a press of the
 'x' key.
 Its primary output is test report.
 During the test, the dialog will show up shortly.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../travis_qmake_gcc_cpp98_qt_qtest/travis_qmake_gcc_cpp98_qt_qtest.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The application
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this build, only one dialog is tested.
 For a build that has more dialogs, see chapter 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
What is QTest?
\end_layout

\begin_layout Standard
QTest is the Qt testing framework
\end_layout

\begin_layout Subsubsection
Do not use Boost.Test to test graphical Qt aplications
\end_layout

\begin_layout Standard
The Boost.Test library (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp11_boost_test"

\end_inset

) works great with console (that is: non-graphical) applications.
 But is is tedious to let it test graphical Qt classes.
 
\end_layout

\begin_layout Standard
Why is this tedious? Because Qt has its own Qt way, that works best in that
 way.
 QTest will process the QApplication event queue and have many privileges.
 Using Boost.Test will make you reponsible to do yourself what Qt normally
 does for you in the back, such as emptying the QApplication event queue.
 Next to this, you will have to make some member functions public (e.g.
 keyPressEvent) to allow your tests to use these.
\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt_qtest/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because this application uses graphics, we need to start a virtual X server
 on Travis CI (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://docs.travis-ci.com/user/gui-and-headless-browsers
\end_layout

\end_inset

), before the tests run.
 
\end_layout

\begin_layout Standard
In the script, the testing executable is created and run.
 The test results will be visible in Travis CI.
 
\end_layout

\begin_layout Standard
After the test, the normal executable is created.
 The normal executable is not run, as it requires user input.
 This means that on Travis CI, it would run forever, wouldn't Travis CI
 detect this and indicate a failure.
\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Standard
There need to be two bash scripts, one for building the testing executable,
 one for building the normal program.
 Both are as short as can be:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/build_test.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build_test.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/build_normal.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build_normal.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
There need to be two Qt Creator scripts, one for building the testing executable
, one for building the normal program.
 Both are as short as can be.
 The only difference is that the testing project file uses 'QT += testlib'.
\end_layout

\begin_layout Standard
Test:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt_qtest/travis_qmake_gcc_cpp98_qt_qtest_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_qt_qtest_test.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest_test"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Normal:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt_qtest/travis_qmake_gcc_cpp98_qt_qtest.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_qt_qtest.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Paragraph
The dialog
\end_layout

\begin_layout Standard
This is the source of dialog:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/my_dialog.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_dialog.h
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-my_dialog.h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only added line, is the 'keyPressEvent'.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/my_dialog.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_dialog.cpp
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-my_dialog.cpp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here we can see that when 'x' is pressed, the application will close.
\end_layout

\begin_layout Paragraph
The main function of the normal executable
\end_layout

\begin_layout Standard
Most graphical Qt applications have this main function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/qtmain.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
qtmain.cpp
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-qtmain.cpp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This main is given as default when creating a new graphical Qt application.
\end_layout

\begin_layout Paragraph
The main function of the testing executable
\end_layout

\begin_layout Standard
The QTest framework collects all tests and calls these within a QTest-generated
 main function.
 This leaves us little left to write (which is awesome):
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/qtmain_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
qtmain_test.cpp
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-qtmain_test.cpp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
The class for the tests
\end_layout

\begin_layout Standard
Here comes in the QTest architecture: for each test suite we will have to
 create a class:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/my_dialog_test.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_dialog_test.h
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-my_dialog_test.h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here we create a class called 'my_dialog_test'.
 The fit into the QTest framework each test suite
\end_layout

\begin_layout Itemize
must be a derived class from QObject
\end_layout

\begin_layout Itemize
the header file must include the 'QtTest' header file
\end_layout

\begin_layout Standard
where each member function is a tests.
\end_layout

\begin_layout Standard
The implementation of each test can be seen in the implementation file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/my_dialog_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_dialog_test.cpp
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-my_dialog_test.cpp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 'QVERIFY' macro is used by the QTest framework to do a single check,
 which will end up in the test report.
 The QTest has some priviliges, as it can directly click keys on the form,
 also when the 'keyPressEvent' isn't public.
\end_layout

\begin_layout Subsection
C++11 and Boost libraries
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11_boost"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Boost libraries.
 
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11
\end_layout

\begin_layout Itemize
Libraries: STL and Boost
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will not compile without the Boost libraries absent.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_boost/travis_qmake_gcc_cpp11_boost.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_boost.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_boost.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_boost/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
C++11 and Boost.Test
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11_boost_test"

\end_inset


\end_layout

\begin_layout Standard
Boost.Test works great for console applications.
 If you use a GUI library like Qt, using QTest is easier (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Qt-and-QTest"

\end_inset

)
\end_layout

\begin_layout Standard
This project consists out of two projects:
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp11_boost_test.pro: the real code
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp11_boost_test_test.pro: the tests
\end_layout

\begin_layout Standard
Both projects center around a function called 'add', which is located in
 the 'my_function.h' and 'my_function.cpp' files, as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_boost
\backslash
_test.pro$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (-2, 0) { $main.cpp$ 
\backslash

\backslash
 };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (2, 0) { $my
\backslash
_function.h$ 
\backslash

\backslash
 $my
\backslash
_function.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_boost.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $main
\backslash
_test.cpp$ 
\backslash

\backslash
 $my
\backslash
_function
\backslash
_test.cpp$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Both of these are compiled both in release and debug mode.
\end_layout

\begin_layout Paragraph
Specifics
\end_layout

\begin_layout Standard
The basic build has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11
\end_layout

\begin_layout Itemize
Libraries: STL and Boost, demonstrating Boost.Test
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: multiple files: main.cpp, my_function.h, my_function.cpp, test_my_function.c
pp
\end_layout

\begin_layout Subsubsection
The function
\end_layout

\begin_layout Standard
First the function that is (1) tested by the test build (2) called by the
 real build, is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/my_functions.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_function.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This header file has the #include guards and the declaration of the function
 'add'.
 It takes two integer values as an argument and returns an int.
\end_layout

\begin_layout Standard
Its definition is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/my_functions.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_function.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Perhaps it was expected that 'add' adds the two integers
\end_layout

\begin_layout Subsubsection
Test build
\end_layout

\begin_layout Standard
The test build' is the build that tests the function.
 It does not have a 'main.cpp' as the exe build has, but uses 'test_my_functions.c
pp' as its main source file.
 This can be seen in the Qt Creator project file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/travis_qmake_gcc_cpp11_boost_test_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_boost_test_test.pro
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file links to the Boost unit test framework.
\end_layout

\begin_layout Standard
Its main source file is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/main_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main_test.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It uses the Boost.Test framework to automatically generate a main function
 and test suite.
 An empty file is created, so Travis can verify there has been built both
 a debug and release mode.
\end_layout

\begin_layout Standard
Its main testing file file is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/my_functions_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_functions_test.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It tests the function 'add'.
\end_layout

\begin_layout Subsubsection
Exe build
\end_layout

\begin_layout Standard
The 'exe' build' is the build that uses the function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next to using the function 'add', also a file is created, so Travis can
 verify there has been built both a debug and release mode.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_boost_test/travis_qmake_gcc_cpp11_boost_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_boost_test.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_boost_test.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file does not link to the Boost unit test
 framework.
\end_layout

\begin_layout Subsubsection
Build script
\end_layout

\begin_layout Standard
The bash build script to build, test and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this script both projects are compiled in both debug and release mode.
 All four exectables are run.
\end_layout

\begin_layout Subsubsection
Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_boost_test/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C++11 and clang
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_clang_cpp11"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by using clang and C++11.
 
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: clang
\end_layout

\begin_layout Itemize
C++ version: C++11
\end_layout

\begin_layout Itemize
Libraries: STL only
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_clang_cpp11/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will not compile without the Boost libraries absent.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_clang_cpp11/travis_qmake_clang_cpp11.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_clang_cpp11.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_clang_cpp11.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_clang_cpp11/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_clang_cpp11/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
C++11 and gcov
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11_gcov"

\end_inset


\end_layout

\begin_layout Standard
In this example, the C++98 build with gcov (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_gcov"

\end_inset

) is extended by using C++11.
 
\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_gcov/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has some new features: 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-5 90
\end_layout

\end_inset

Codecov will call 'gcov', even if it should call 'gcov-5'.
 With this line, we let the command 'gcov' call 'gcov-5'
\end_layout

\begin_layout Standard
We must run the executable for codecov to be able to do its job.
 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Standard
The bash build script to build this is trivial:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_gcov/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script to obtain the code coverage is new:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_gcov/get_code_cov.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
get_code_cov.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The new steps are:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for filename in `find .
 | egrep '
\backslash
.cpp'`; 
\end_layout

\begin_layout Plain Layout

do 
\end_layout

\begin_layout Plain Layout

  gcov-5 -n -o .
 $filename > /dev/null; 
\end_layout

\begin_layout Plain Layout

done
\end_layout

\end_inset

Find all filenames (in this folder and its subfolder) that end with '.cpp'.
 For each of these filenames, let gcov-5 work on it.
 The '-n' flag denotes 'no output please'.
 Because there is still output, this output is sent to the void of '/dev/null'.
 The '-o .' means that the object files are in the same folder as this script
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
This Qt Creator project file is a mix from using only gcov (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_gcov"

\end_inset

) and using C++11 (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_clang_cpp11"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_gcov/travis_qmake_gcc_cpp11_gcov.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_gcov.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_gcov.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
See those chapters for more details.
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
The C++ source file used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_gcov/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this code, the function 'do_magic' is used for a single value, that is
 displayed on screen.
 Because the value '42' is not used, not all program flows of 'do_magic'
 are covered.
 The code coverage report should inform us about this.
\end_layout

\begin_layout Subsection
C++11 and Qt
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11_qt"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by both adding C++11 and the Qt library.
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11 
\end_layout

\begin_layout Itemize
Libraries: STL and Qt
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_qt/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does ...
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_qt/travis_qmake_gcc_cpp11_qt.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_qt.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_qt.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_qt/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_qt/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\end_layout

\begin_layout Subsection
C++11 and Rcpp
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11_rcpp"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Rcpp library/package.
 
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11
\end_layout

\begin_layout Itemize
Libraries: STL and Rcpp
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: multiple files
\end_layout

\begin_layout Standard
The build will be complex: I will show the C++ build and the R build seperately
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1, 2) { $C++$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (-2, 0) { $main.cpp$ 
\backslash

\backslash
 $domagic.pro$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (2, 0) { $do
\backslash
_magic
\backslash
_cpp.h$ 
\backslash

\backslash
 $do
\backslash
_magic
\backslash
_cpp.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5, 2) { $R$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $do
\backslash
_magic
\backslash
_r.R$ 
\backslash

\backslash
 $test-do
\backslash
_magic.R$ };
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
C++ and R: the C++ function
\end_layout

\begin_layout Standard
This Travis CI project is centered around the function 'do_magic_cpp'.
 I use the extension '_cpp' to indicate it is a C++ function.
 The function 'do_magic_cpp' is used by both C++ and R.
 It is declared in the header file 'do_magic_cpp.h', as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_rcpp/src/do_magic_cpp.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
src/do_magic_cpp.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The header file consists solely of #include guards and the declaration of
 the function 'do_magic_cpp'.
 The C++11 keyword 'noexcept' will make the build fail to compile under
 C++98, but will compile under C++11 and later versions of C++.
\end_layout

\begin_layout Standard
The function 'do_magic_cpp' is implemented in the implementation file 'do_magic_
cpp.cpp', as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_rcpp/src/do_magic_cpp.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
src/do_magic_cpp.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This source file is very simple.
 Most lines are dedicates to the C++ roxygen2 documentation.
 Omitting this documentation will fail the R package to build, as this documenta
tion is mandatory 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Test this
\end_layout

\end_inset

.
 Note that 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// [[Rcpp::export]]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
needs to written exactly as such
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Test this
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
C++: main source file
\end_layout

\begin_layout Standard
The C++ program has a normal main function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_rcpp/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All it does is a simple test of the 'do_magic_cpp' function.
\end_layout

\begin_layout Subsubsection
C++: Qt Creator project file
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_rcpp/domagic.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
domagic.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_rcpp_domagic.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here is what the sections do:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Shared C++11 files
\end_layout

\begin_layout Plain Layout

INCLUDEPATH += src
\end_layout

\begin_layout Plain Layout

SOURCES += src/do_magic_cpp.cpp
\end_layout

\begin_layout Plain Layout

HEADERS += src/do_magic_cpp.h
\end_layout

\end_inset

These files are shared by the C++11 and R project
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Rcpp, adapted from script from Dirk Eddelbuettel and Romain Francois
\end_layout

\begin_layout Plain Layout

R_HOME = $$system(R RHOME)
\end_layout

\begin_layout Plain Layout

RCPPINCL = $$system($$R_HOME/bin/Rscript -e 
\backslash
"Rcpp:::CxxFlags
\backslash
(
\backslash
)
\backslash
")
\end_layout

\begin_layout Plain Layout

INCLUDEPATH += RCPPINCL
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Rcpp does not play nice with -Weffc++
\end_layout

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -Wall -Wextra -Werror
\end_layout

\end_inset

Let Rcpp be found by and compile cleanly.
 To do so, the '-Weffc++' warnings have to be omitted
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# C++11-only files
\end_layout

\begin_layout Plain Layout

SOURCES += main.cpp
\end_layout

\end_inset

This contains the main function that is only used by the C++11-only build
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# R
\end_layout

\begin_layout Plain Layout

LIBS += -lR
\end_layout

\end_inset

Link to the R language libraries
\end_layout

\begin_layout Subsubsection
C++: build script
\end_layout

\begin_layout Standard
The C++ bash build script is straightforward.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_rcpp/build_cpp.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build_cpp.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This script is already described in the C++98 and Rcpp chapter (chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:travis_qmake_gcc_cpp98_rcpp"

\end_inset

, algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:travis_qmake_gcc_cpp98_rcpp_build_cpp.sh"

\end_inset

).
\end_layout

\begin_layout Subsubsection
R: the R function
\end_layout

\begin_layout Standard
The R function 'do_magic_r' calls the C++ function 'do_magic_cpp':
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_rcpp/R/do_magic_r.R"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
R/do_magic_r.R
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_rcpp_do_magic_r.R"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Must lines are dedicated to Roxygen2 documentation.
 Omitting this documentation will fail the R package to build, as this documenta
tion is mandatory
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Test this
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
R: The R tests
\end_layout

\begin_layout Standard
R allows for easy testing using the 'testthat' package.
 A test file looks as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_rcpp/tests/testthat/test-do_magic.R"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
tests/testthat/test-do_magic_r.R
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_rcpp_test-do_magic_r.R"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The tests call both the R and C++ functions with certain inputs and checks
 if the output matches the expectations.
 It may be a good idea to only call the R function from here, and move the
 C++ function tests to a C++ testing suite like Boost.Test.
\end_layout

\begin_layout Subsubsection
R: script to install packages
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_rcpp/install_r_packages.R"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
install_r_packages.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To compile the C++ code, Rcpp needs to be installed.
 The R package needs the other packages to work.
 An R code repository from the UK was used: without supply an R code repository,
 Travis will be asked to pick one, which it cannot.
 
\end_layout

\begin_layout Subsubsection
The Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_rcpp/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file is rather extensive:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo: true
\end_layout

\begin_layout Plain Layout

language: cpp
\end_layout

\begin_layout Plain Layout

compiler: gcc
\end_layout

\end_inset

The default language used has to be C++
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install:
\end_layout

\begin_layout Plain Layout

 - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test # C++11
\end_layout

\begin_layout Plain Layout

 - sudo add-apt-repository -y ppa:marutter/rrutter # R
\end_layout

\begin_layout Plain Layout

 - sudo apt-get update -qq
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Before installation, Travis has to add to apt repositories, one for C++11
 and one for the R version used by CRAN
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

install: 
\end_layout

\begin_layout Plain Layout

 - sudo apt-get install -qq g++-5  # C++11
\end_layout

\begin_layout Plain Layout

 - sudo apt-get install -qq r-base r-base-dev  # R
\end_layout

\begin_layout Plain Layout

 - sudo apt-get install -qq lyx texlive  # pdflatex, used by knitr
\end_layout

\begin_layout Plain Layout

 - sudo Rscript install_r_packages.R  # Rcpp
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Travis has to install the prerequisites for C++11, R, pdflatex (used by
 R's knitr) and some R packages
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

script: 
\end_layout

\begin_layout Plain Layout

 # C++
\end_layout

\begin_layout Plain Layout

 - ./build_cpp.sh
\end_layout

\begin_layout Plain Layout

 # R wants all non-R files gone...
\end_layout

\begin_layout Plain Layout

 - ./clean.sh
\end_layout

\begin_layout Plain Layout

 - rm .gitignore
\end_layout

\begin_layout Plain Layout

 - rm src/.gitignore
\end_layout

\begin_layout Plain Layout

 - rm .travis.yml
\end_layout

\begin_layout Plain Layout

 - rm -rf .git
\end_layout

\begin_layout Plain Layout

 - rm -rf ..Rcheck
\end_layout

\begin_layout Plain Layout

 # Now R is ready to go
\end_layout

\begin_layout Plain Layout

 - R CMD check .
\end_layout

\end_inset

The script consists out of a build and run of the C++11 code, cleaning up
 for R, then building an R package
\end_layout

\begin_layout Subsection
C++11 and SFML
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11_sfml"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by both adding C++11 and the SFML library.
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11 
\end_layout

\begin_layout Itemize
Libraries: STL and SFML
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_sfml/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does ...
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_sfml/travis_qmake_gcc_cpp11_sfml.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_sfml.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_sfml.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_sfml/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_sfml/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\end_layout

\begin_layout Subsection
C++11 and Urho3D
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11_urho3d"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by both adding C++11 and the Urho3D library.
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11 
\end_layout

\begin_layout Itemize
Libraries: STL and Urho3D
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_urho3d/mastercontrol.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
mastercontrol.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does ...
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_urho3d/travis_qmake_gcc_cpp11_urho3d.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_urho3d.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_urho3d.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_urho3d/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_urho3d/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\end_layout

\begin_layout Subsection
C++11 and Wt
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11_wt"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by both adding C++11 and the Wt library.
\end_layout

\begin_layout Standard
DOES NOT WORK YET
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11 
\end_layout

\begin_layout Itemize
Libraries: STL and Wt
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_wt/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does ...
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_wt/travis_qmake_gcc_cpp11_wt.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_wt.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_wt.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_wt/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\end_layout

\begin_layout Subsection
C++14 and Boost libraries
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp14_boost"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Boost libraries.
 
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++14
\end_layout

\begin_layout Itemize
Libraries: STL and Boost
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will not compile without the Boost libraries absent.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14_boost/travis_qmake_gcc_cpp14_boost.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp14_boost.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp14_boost.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14_boost/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C++14 and Boost.Test
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp14_boost_test"

\end_inset


\end_layout

\begin_layout Standard
This project consists out of two projects:
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp14_boost_test.pro: the real code
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp14_boost_test_test.pro: the tests
\end_layout

\begin_layout Standard
Both projects center around a function called 'add', which is located in
 the 'my_function.h' and 'my_function.cpp' files, as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp14$ 
\backslash

\backslash
 $
\backslash
_boost
\backslash
_test.pro$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (-2, 0) { $main.cpp$ 
\backslash

\backslash
 };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (2, 0) { $my
\backslash
_function.h$ 
\backslash

\backslash
 $my
\backslash
_function.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp14$ 
\backslash

\backslash
 $
\backslash
_boost.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $main
\backslash
_test.cpp$ 
\backslash

\backslash
 $my
\backslash
_function
\backslash
_test.cpp$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Both of these are compiled both in release and debug mode.
\end_layout

\begin_layout Paragraph
Specifics
\end_layout

\begin_layout Standard
The basic build has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++14
\end_layout

\begin_layout Itemize
Libraries: STL and Boost, demonstrating Boost.Test
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: multiple files: main.cpp, my_function.h, my_function.cpp, test_my_function.c
pp
\end_layout

\begin_layout Subsubsection
The function
\end_layout

\begin_layout Standard
First the function that is (1) tested by the test build (2) called by the
 real build, is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/my_functions.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_function.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This header file has the #include guards and the declaration of the function
 'add'.
 It takes two integer values as an argument and returns an int.
\end_layout

\begin_layout Standard
Its definition is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/my_functions.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_function.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Perhaps it was expected that 'add' adds the two integers
\end_layout

\begin_layout Subsubsection
Test build
\end_layout

\begin_layout Standard
The test build' is the build that tests the function.
 It does not have a 'main.cpp' as the exe build has, but uses 'test_my_functions.c
pp' as its main source file.
 This can be seen in the Qt Creator project file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/travis_qmake_gcc_cpp14_boost_test_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp14_boost_test_test.pro
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file links to the Boost unit test framework.
\end_layout

\begin_layout Standard
Its main source file is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/main_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main_test.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It uses the Boost.Test framework to automatically generate a main function
 and test suite.
 An empty file is created, so Travis can verify there has been built both
 a debug and release mode.
\end_layout

\begin_layout Standard
Its main testing file file is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/my_functions_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
my_functions_test.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It tests the function 'add'.
\end_layout

\begin_layout Subsubsection
Exe build
\end_layout

\begin_layout Standard
The 'exe' build' is the build that uses the function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next to using the function 'add', also a file is created, so Travis can
 verify there has been built both a debug and release mode.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14_boost_test/travis_qmake_gcc_cpp14_boost_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp14_boost_test.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp14_boost_test.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file does not link to the Boost unit test
 framework.
\end_layout

\begin_layout Subsubsection
Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14_boost_test/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C++14 and Rcpp
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp14_rcpp"

\end_inset


\end_layout

\begin_layout Standard
Does not work yet.
\end_layout

\begin_layout Section
Extending the build by multiple steps
\end_layout

\begin_layout Standard
The following chapter describe how to extend the build in multiple steps.
 These are:
\end_layout

\begin_layout Itemize
Use of C++11, Boost.Test and gcov: see chapter 
\end_layout

\begin_layout Subsection
C++11 and use of gcov in debug mode only
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11_debug_gcov"

\end_inset


\end_layout

\begin_layout Standard
In this example, the C++11 build with gcov in debug mode (chapter ???) is
 extended by using C++11.
 
\end_layout

\begin_layout Subsubsection
Build overview
\end_layout

\begin_layout Standard
This will be a more complex build, consisting of two projects:
\end_layout

\begin_layout Itemize
The regular project that just runs the code
\end_layout

\begin_layout Itemize
The project that measures code coverage
\end_layout

\begin_layout Standard
The filenames are shown in this figure:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_gcov.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (-2, 0) { $main.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (2, 0) { $do
\backslash
_magic.h$ 
\backslash

\backslash
 $do
\backslash
_magic.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_gcov
\backslash
_gcov.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $main
\backslash
_gcov.cpp$ };
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_debug_gcov/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has some new features: 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo: true
\end_layout

\end_inset

Travis will give super user rights to the script.
 This will slow the build time, but it is inevitable for the next step
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install: sudo pip install codecov
\end_layout

\end_inset

Travis will use pip to install codecov using super user rights
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

after_success: codecov
\end_layout

\end_inset

After the script has run successfully, codecov is called
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
Release:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_debug_gcov/travis_qmake_gcc_cpp11_debug_gcov.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_debug_gcov.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_debug_gcov.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Debug with gcov:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_debug_gcov/travis_qmake_gcc_cpp11_debug_gcov_gcov.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_gcov.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_gcov_gcov.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has two new lines:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -fprofile-arcs -ftest-coverage
\end_layout

\end_inset

Let the C++ compiler add coverage information
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LIBS += -lgcov
\end_layout

\end_inset

Link against the gcov library
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Paragraph
Common files
\end_layout

\begin_layout Standard
Both builds use the following code:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_debug_gcov/do_magic.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
do_magic.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
And its implementation:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_debug_gcov/do_magic.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
do_magic.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Release main function
\end_layout

\begin_layout Standard
The C++ source file used by the normal build is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_debug_gcov/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Debug and gcov main function
\end_layout

\begin_layout Standard
The C++ source file used by the normal build is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_debug_gcov/main_gcov.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
main_gcov.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C++11, Boost.Test and gcov
\begin_inset CommandInset label
LatexCommand label
name "subsec:travis_qmake_gcc_cpp11_boost_test_gcov"

\end_inset


\end_layout

\begin_layout Standard
This project adds code coverage to the previous project and is mostly similar
\end_layout

\begin_layout Standard
This project consists out of two projects:
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp11_boost_test_gcov.pro: the real code
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp11_boost_test_gcov_test.pro: the tests, also measures
 the code coverage
\end_layout

\begin_layout Standard
Both projects center around a function called 'add', which is located in
 the 'my_function.h' and 'my_function.cpp' files, as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_boost
\backslash
_test$ 
\backslash

\backslash
 $
\backslash
_gcov.pro$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (-2, 0) { $main.cpp$ 
\backslash

\backslash
 };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (2, 0) { $my
\backslash
_function.h$ 
\backslash

\backslash
 $my
\backslash
_function.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_boost
\backslash
_test$ 
\backslash

\backslash
 $
\backslash
_gcov
\backslash
_test.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $main
\backslash
_test.cpp$ 
\backslash

\backslash
 $my
\backslash
_function
\backslash
_test.cpp$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Both of these are compiled both in release and debug mode.
\end_layout

\begin_layout Subsubsection
The function
\end_layout

\begin_layout Standard
Same
\end_layout

\begin_layout Subsubsection
Test build
\end_layout

\begin_layout Standard
The test build' is the build that tests the function.
 It does not have a 'main.cpp' as the exe build has, but uses 'test_my_functions.c
pp' as its main source file.
 This can be seen in the Qt Creator project file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test_gcov/travis_qmake_gcc_cpp11_boost_test_gcov_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_boost_test_gcov_test.pro
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file links to the Boost unit test framework
 and also add code coverage.
\end_layout

\begin_layout Standard
Its main source file is identical.
\end_layout

\begin_layout Standard
Its main testing file file is identical.
\end_layout

\begin_layout Subsubsection
Normal build
\end_layout

\begin_layout Standard
The normal build is identical.
\end_layout

\begin_layout Subsubsection
Build script
\end_layout

\begin_layout Standard
The bash build script to build, test and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test_gcov/build_test.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
build_test.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this script both projects are compiled in both debug and release mode.
 All four exectables are run.
\end_layout

\begin_layout Subsubsection
Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_boost_test_gcov/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Section
Troubleshooting
\end_layout

\begin_layout Subsection
sudo apt-get install gcov-5 failed and exited with 100 during .
\end_layout

\begin_layout Standard
Or in full:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

The command "sudo -E apt-get -yq --no-install-suggests --no-install-recommends
 --force-yes install gcov-5" failed and exited with 100 during .
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It means Travis-CI cannot find the package 'gcov-5' in the 'addons' section.
\end_layout

\begin_layout Standard
Comment out the addons section and add this to the Travis script:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

apt-cache search "gcov" | egrep "^gcov"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One can then observe that 'gcov' is absent.
 It is part of g++.
\end_layout

\begin_layout Subsection
Cannot find the correct version of a package
\end_layout

\begin_layout Standard
Comment out the addons section and add this to the Travis script:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 - apt-cache search "g++" | egrep "^gcc"
\end_layout

\begin_layout Plain Layout

 - apt-cache search "g++" | egrep "^g
\backslash
+
\backslash
+"
\end_layout

\begin_layout Plain Layout

 - apt-cache search "gcov" | egrep "^gcov"
\end_layout

\begin_layout Plain Layout

 - apt-cache search "libboost"| egrep "^libboost"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will cause Travis to search the aptitude packages.
\end_layout

\begin_layout Subsection
fatal error: Rcpp.h: No such file or directory
\end_layout

\begin_layout Standard
Add these line to the .travis.yml file to find Rcpp.h:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

after_failure:
\end_layout

\begin_layout Plain Layout

 # fatal error: Rcpp.h: No such file or directory
\end_layout

\begin_layout Plain Layout

 - find / -name 'Rcpp.h'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can then add the folder found to the INCLUDEPATHS of the Qt Create project
 file.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "travis_cpp_tutorial"
options "bibtotoc,plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"
name "Index"
literal "true"

\end_inset


\end_layout

\begin_layout Subsection
Name
\end_layout

\begin_layout Subsubsection
What is Name?
\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\end_body
\end_document
